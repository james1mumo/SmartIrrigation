#define TINY_GSM_MODEM_SIM800 // Select your modem:

#define SerialMon Serial // Set serial for debug console
#define SerialAT Serial2 // Set serial for AT commands (to the GSM module)


#define TINY_GSM_DEBUG SerialMon // Define the serial console for GSM debug prints
#define TINY_GSM_USE_GPRS true // Define how you're planning to connect to the internet.
#define DUMP_AT_COMMANDS true

// set GSM PIN, if any
#define GSM_PIN ""


#include <TinyGsmClient.h>
#include <PubSubClient.h>
#include <EEPROM.h>
#include <ArduinoHttpClient.h>


#ifdef DUMP_AT_COMMANDS
  #include <StreamDebugger.h>
  StreamDebugger debugger(SerialAT, SerialMon);
  TinyGsm        modem(debugger);
#else
  TinyGsm        modem(SerialAT);
#endif


#define PUMP_PIN 13
#define TOKEN_ARR_SIZE 10
#define Buffer_Size 256

// Your GPRS credentials, if any
const char apn[] = "safaricom";
const char gprsUser[] = "saf";
const char gprsPass[] = "data";

// Server details
const char server[]   = "172.105.51.116";
const char resource[] = "/automated-pump/api.php?get-pump-status=";
const int  port       = 80;


int relay_pin = 24;
int indicatorLED_On =  40;        // Pin for the indicator LED for Switch On Pump (changed to 10)
int indicatorLED_Off = 30;        // Pin for the indicator LED for Switch Off Pump (added pin 5)

// // Define addresses for EEPROM storage
// const int relayStateAddress = 0;
// const int ledOnStateAddress = 1;
// const int ledOffStateAddress = 2;


int pumpStatus = LOW;

uint32_t lastReconnectAttempt = 0;
char delim[2] = "_";
char validmsg[2] = "@";
char imei[17];
char *token;

char *token_arr[TOKEN_ARR_SIZE]; // array to store tokens.
uint8_t tokencount = 0;          // gets the number of token values received


TinyGsmClient client(modem);
PubSubClient  mqtt(client);
HttpClient    http(client, server, port);



void makeHttpRequest() {
  SerialMon.print(F("Performing HTTP GET request... "));

  char url[100];
  strcpy(url, resource);
  strcat(url, imei);

  // SerialMon.println(url);


  int err = http.get(url);
  if (err != 0) {
    SerialMon.println(F("failed to connect"));
    delay(1000);
    return;
  }

  int status = http.responseStatusCode();
  SerialMon.print(F("Response status code: "));
  SerialMon.println(status);
  if (!status) {
    delay(1000);
    return;
  }

  String body = http.responseBody();
  SerialMon.println(F("Response:"));
  SerialMon.println(body);

  if (String(body) == "1"){
    digitalWrite(relay_pin, LOW);  // Turn off the relay
    digitalWrite(indicatorLED_On, LOW);  // Turn on the indicator LED for Switch On Pump
    digitalWrite(indicatorLED_Off, HIGH);  // Turn off the indicator LED for Switch Off Pump
    // // Store the new states in EEPROM
    // EEPROM.write(relayStateAddress, LOW);
    // EEPROM.write(ledOnStateAddress, HIGH);
    // EEPROM.write(ledOffStateAddress, LOW);
    Serial.print("Switched On Pump  ");
  }else{
    digitalWrite(relay_pin, HIGH);  // Turn on the relay
    digitalWrite(indicatorLED_On, HIGH);  // Turn off the indicator LED for Switch On Pump
    digitalWrite(indicatorLED_Off, LOW);  // Turn on the indicator LED for Switch Off Pump
    // // Store the new states in EEPROM
    // EEPROM.write(relayStateAddress, HIGH);
    // EEPROM.write(ledOnStateAddress, LOW);
    // EEPROM.write(ledOffStateAddress, HIGH);
    Serial.print("Switched Off Pump ");
  }

  

  // Shutdown
  http.stop();

}


void setup() {
  // Set console baud rate
  SerialMon.begin(115200);
  delay(10);

  pinMode(PUMP_PIN, OUTPUT);
  pinMode(relay_pin, OUTPUT);
  pinMode(indicatorLED_On, OUTPUT);
  pinMode(indicatorLED_Off, OUTPUT);
  
  // // Read the last relay and LED states from EEPROM
  // int storedRelayState = EEPROM.read(relayStateAddress);
  // int storedLedOnState = EEPROM.read(ledOnStateAddress);
  // int storedLedOffState = EEPROM.read(ledOffStateAddress);

  digitalWrite(relay_pin, HIGH);
  digitalWrite(indicatorLED_On, HIGH);
  digitalWrite(indicatorLED_Off, HIGH);
 

  // !!!!!!!!!!!
  // Set your reset, enable, power pins here
  // !!!!!!!!!!!

  SerialMon.println("\n\nStarting...");

  // Set GSM module baud rate
  TinyGsmAutoBaud(SerialAT);

  // Restart takes quite some time, To skip it, call init() instead of restart()
  SerialMon.println("Initializing modem...");
  modem.restart();

  String modemInfo = modem.getModemInfo();
  SerialMon.print("Modem Info: ");
  SerialMon.println(modemInfo);


  // Unlock your SIM card with a PIN if needed
  if (GSM_PIN && modem.getSimStatus() != 3) { modem.simUnlock(GSM_PIN); }

  SerialMon.print("Waiting for network...");
  if (!modem.waitForNetwork()) {
    SerialMon.println(" fail");
    delay(10000);
    return;
  }
  SerialMon.println(" success");

  if (modem.isNetworkConnected()) { SerialMon.println("Network connected"); }

  // GPRS connection parameters are usually set after network registration
  SerialMon.print(F("Connecting to "));
  SerialMon.print(apn);
  if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
    SerialMon.println(" fail");
    delay(10000);
    return;
  }
  SerialMon.println(" success");

  if (modem.isGprsConnected()) { SerialMon.println("GPRS connected"); }



  SerialMon.print("Voltage level: ");
  SerialMon.print(modem.getBattVoltage());  
  SerialMon.println("V");

  SerialMon.print("IMEI: ");
  SerialMon.println(modem.getIMEI());

  SerialMon.print("Signal quality: ");
  int result = modem.getSignalQuality();
  int network_strength = 0;
  if(result >= 2 && result <= 9) {
    //Signal Quality = Marginal
    network_strength = 1;
  }
  else if(result >= 10 && result <= 14) {
    //Signal Quality = OK
    network_strength = 2;
  }
  else if(result >= 15 && result <= 19) {
    //Signal Quality = Good
    network_strength = 3;
  }
  else if(result >= 20 && result <= 31) {
    //Signal Quality = Excellent
    network_strength = 4;
  }else if(result == 0 || result == 1 || result == 99){
    //not known or not detectable
    network_strength = 0;
  }   

  SerialMon.print(network_strength);
  SerialMon.println(" bars");


}

void loop() {
  // Make sure we're still registered on the network
  if (!modem.isNetworkConnected()) {
    SerialMon.println("Network disconnected");
    if (!modem.waitForNetwork(180000L, true)) {
      SerialMon.println(" fail");
      delay(10000);
      return;
    }
    if (modem.isNetworkConnected()) {
      SerialMon.println("Network re-connected");
    }

  #if TINY_GSM_USE_GPRS
      // and make sure GPRS/EPS is still connected
      if (!modem.isGprsConnected()) {
        SerialMon.println("GPRS disconnected!");
        SerialMon.print(F("Connecting to "));
        SerialMon.print(apn);
        if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
          SerialMon.println(" fail");
          delay(1000);
          return;
        }
        if (modem.isGprsConnected()) { SerialMon.println("GPRS reconnected"); }
      }
  #endif
  }


  makeHttpRequest();
  delay(3000);

}
